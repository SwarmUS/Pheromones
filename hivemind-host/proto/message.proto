syntax = "proto3";

option java_package = "com.swarmus.hivear";

// Generic
enum GenericResponseStatus {
    OK = 0;
    BAD_REQUEST = 1;
    ERROR = 2;
}

message GenericResponse {
    GenericResponseStatus status = 1;
    string details = 2;
}

// FunctionCall
message FunctionArgument {
    oneof argument{
        int64 int_arg = 1;
        float float_arg = 2;
    }
}

message FunctionCallRequest {
    string function_name = 1;
    repeated FunctionArgument arguments = 2;
}

// Not useful as of now, could probably remove eventually
message FunctionCallResponse {
    GenericResponse response = 1;
}

// Function List/Description

message FunctionListLengthRequest {
}

message FunctionListLengthResponse {
    uint32 function_array_length = 1;
}

enum FunctionDescriptionArgumentType {
    UNKNOWN_TYPE = 0;
    INT = 1;
    FLOAT = 2;
}
message FunctionDescriptionArgument{
    string argument_name = 1;
    FunctionDescriptionArgumentType type = 2;
}

message FunctionDescription {
    string function_name = 1;
    repeated FunctionDescriptionArgument arguments_description = 2;  
}


message FunctionDescriptionRequest {
    uint32 function_list_index = 1;
}

message FunctionDescriptionResponse {
    oneof response{
        GenericResponse generic = 1;
        FunctionDescription function_description = 2;
    }
}

// UserCalll
enum UserCallTarget {
     UNKNOWN = 0;
     HOST = 1;
     BUZZ = 2;
}


message UserCallRequest {
    UserCallTarget destination = 1;
    UserCallTarget source = 2;

    oneof request{
          FunctionCallRequest function_call = 3;
          FunctionListLengthRequest function_list_length = 4;
          FunctionDescriptionRequest function_description = 5;
    }
}

message UserCallResponse {
    UserCallTarget destination = 1;
    UserCallTarget source = 2;

    oneof response{
        GenericResponse generic = 3;
        FunctionCallResponse function_call = 4;
        FunctionListLengthResponse function_list_length = 5;
        FunctionDescriptionResponse function_description = 6;
    }
}

// Hivemind API
message IdRequest {
}

message IdResponse {
    uint32 id = 1;
}

message HiveMindApiRequest {
    oneof request{
            IdRequest id = 1;
    }
}

message HiveMindApiResponse {
    oneof response{
          GenericResponse generic = 1;
          IdResponse id = 2;
    }
}

// Swarm API, used internally, by the ESP32 for example. Shouldn't reach the hivemind
// Will maybe make it's own library
message SwarmApiRequest {
    oneof request{
            IdRequest id = 1;
    }
}

message SwarmApiResponse {
    oneof response{
          GenericResponse generic = 1;
          IdResponse id = 2;
    }
}

// Base message
message Request {
    uint32 id = 1;
    oneof message {
        UserCallRequest user_call = 2;
        HiveMindApiRequest hive_api = 3;
        SwarmApiRequest swarm_api = 4;
    }
}

message Response {
    uint32 id = 1;
    oneof message {
        GenericResponse generic = 2;
        UserCallResponse user_call = 3;
        HiveMindApiResponse hive_api = 4;
        SwarmApiResponse swarm_api = 5;
    }
}

// First message sent on connection
message Greeting{
    // Id of the board
    uint32 id = 1;
}

message Message {

    uint32 source_id = 1;

    uint32 destination_id = 2;

    oneof message {
        Request request = 3;
        Response response = 4;
        Greeting greeting = 5;
    }
}
