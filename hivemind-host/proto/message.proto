syntax = "proto3";

option java_package = "com.swarmus.hivear";

// Generic
enum GenericResponseStatus {
    OK = 0;
    BAD_REQUEST = 1;
    ERROR = 2;
}

message GenericResponse {
    GenericResponseStatus status = 1;
    string details = 2;
}

// FunctionCall
message FunctionArgument {
    oneof argument{
        int64 int_arg = 1;
        float float_arg = 2;
    }
}

message FunctionCallRequest {
    string function_name = 1;
    repeated FunctionArgument arguments = 2;
}

// Not useful as of now, could probably remove eventuallt
message FunctionCallResponse {
    GenericResponse response = 1;
}

// UserCalll
enum UserCallTarget {
     UNKNOWN = 0;
     HOST = 1;
     BUZZ = 2;
}


message UserCallRequest {
    UserCallTarget destination = 1;
    UserCallTarget source = 2;

    oneof request{
          FunctionCallRequest functionCall = 3;
    }
}

message UserCallResponse {
    UserCallTarget destination = 1;
    UserCallTarget source = 2;

    oneof response{
          FunctionCallResponse functionCall = 3;
          GenericResponse generic = 4;
    }
}

// Hivemind API
message IdRequest {
}

message IdResponse {
    uint32 id = 1;
}

message HiveMindApiRequest {
    oneof request{
            IdRequest id = 1;
    }
}

message HiveMindApiResponse {
    oneof response{
          GenericResponse generic = 1;
          IdResponse id = 2;
    }
}

// Swarm API, used internally, by the ESP32 for example. Shouldn't reach the hivemind
message SwarmApiRequest {
    oneof request{
            IdRequest id = 1;
    }
}

message SwarmApiResponse {
    oneof response{
          GenericResponse generic = 1;
          IdResponse id = 2;
    }
}

// Base message
message Request {
    uint32 id = 1;
    oneof message {
        UserCallRequest userCall = 2;
        HiveMindApiRequest hiveApi = 3;
        SwarmApiRequest swarm = 4;
    }
}

message Response {
    uint32 id = 1;
    oneof message {
        GenericResponse generic = 2;
        UserCallResponse userCall = 3;
        HiveMindApiResponse hiveApi = 4;
        SwarmApiResponse swarm = 5;
    }
}

// First message sent on connection
message Greeting{
    uint32 id = 1;
}

message Message {

    uint32 sourceId = 1;

    uint32 destinationId = 2;

    oneof message {
        Request request = 3;
        Response response = 4;
        Greeting greeting = 5;
    }
}
