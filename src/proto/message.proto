syntax = "proto3";

option java_package = "com.swarmus.hivear";

// Generic
// Generic response for reuse
enum GenericResponseStatus {
    OK = 0;
    BAD_REQUEST = 1;
    ERROR = 2;
}

message GenericResponse {
    GenericResponseStatus status = 1;
    string details = 2;
}

// FunctionCall
// Allows the user to call a function to a remote component (buzz or host)
message FunctionArgument {
    oneof argument{
        int64 int_arg = 1;
        float float_arg = 2;
    }
}

message FunctionCallRequest {
    string function_name = 1;
    repeated FunctionArgument arguments = 2;
}

// TODO: Not usefull, can return a Response->genericResponse
message FunctionCallResponse {
    GenericResponse response = 1;
}

// Function List
// Get the length of the function registration
message FunctionListLengthRequest {
}

message FunctionListLengthResponse {
    uint32 function_array_length = 1;
}

// Function Description
// Can get the function name and args name/type via it's id (index position)
// The index starts at 0, use FunctionListLengthRequest to get the length of it
enum FunctionDescriptionArgumentType {
    UNKNOWN_TYPE = 0;
    INT = 1;
    FLOAT = 2;
}
message FunctionDescriptionArgument{
    string argument_name = 1;
    FunctionDescriptionArgumentType type = 2;
}

message FunctionDescription {
    string function_name = 1;
    repeated FunctionDescriptionArgument arguments_description = 2;  
}


message FunctionDescriptionRequest {
    uint32 function_list_index = 1;
}

message FunctionDescriptionResponse {
    oneof response{
        GenericResponse generic = 1; // TODO: Not usefull, can return a Response->genericResponse
        FunctionDescription function_description = 2;
    }
}

// UserCall
// Used by the user code in the Buzz script and the robot
enum UserCallTarget {
     UNKNOWN = 0;
     HOST = 1;
     BUZZ = 2;
}


message UserCallRequest {
    UserCallTarget destination = 1;
    UserCallTarget source = 2;

    oneof request{
          FunctionCallRequest function_call = 3;
          FunctionListLengthRequest function_list_length = 4;
          FunctionDescriptionRequest function_description = 5;
    }
}

message UserCallResponse {
    UserCallTarget destination = 1;
    UserCallTarget source = 2;

    oneof response{
        GenericResponse generic = 3; // TODO: Not usefull, can return a Response->genericResponse
        FunctionCallResponse function_call = 4;
        FunctionListLengthResponse function_list_length = 5;
        FunctionDescriptionResponse function_description = 6;
    }
}

// HivemindHost API
// Used by the host robot, this is the API that the HM expose to the robot

message Bytes {
    uint32 packet_id = 1;
    uint32 packet_no = 2;
    bool last_packet = 3;
    bytes payload = 4;
}

message NeighborPosition {
    float distance  = 1;
    float azimuth  = 2;
    bool in_los = 3;
}

message GetNeighborRequest {
    uint32 neighbor_id = 1;
}

message GetNeighborsListRequest {
}

message GetAgentsListRequest {
}

message GetNeighborResponse {
    uint32 neighbor_id = 1;
    NeighborPosition position = 2;
}

message GetNeighborsListResponse {
    repeated uint32 neighbors = 1;
}

message GetAgentsListResponse {
    repeated uint32 agents = 1;
}

message HiveMindHostApiRequest {
    oneof request{
        Bytes bytes = 1;
        GetNeighborRequest neighbor = 2;
        GetNeighborsListRequest neighbors_list = 3;
        GetAgentsListRequest agents_list = 4;
    }
}

message HiveMindHostApiResponse {
    oneof response{
        GetNeighborResponse neighbor = 1;
        GetNeighborsListResponse neighbors_list = 2;
        GetAgentsListResponse agents_list = 3;
    }
}

// HiveConnectHivemind API
// Used by the HiveMind with the HiveConnect, this is the API that the HC expose to the HM
message HiveConnectNetworkAccess {
    string ssid = 1;
    string password = 2;
}

message HiveConnectRootNode {
    bool is_root = 1;
}

message HiveConnectMeshEnable {
    bool use_mesh = 1;
}

message HiveConnectNetworkConfigSetRequest {
    HiveConnectNetworkAccess network_access = 1;
    HiveConnectRootNode root_node = 2;
    HiveConnectMeshEnable mesh_enable = 3;
}
message HiveConnectNetworkConfigSetResponse  {
    GenericResponse response = 1;
}

message HiveConnectNetworkConfigGetRequest {}

message HiveConnectNetworkConfigGetResponse {
    HiveConnectNetworkAccess network_access = 1;
    HiveConnectRootNode root_node = 2;
    HiveConnectMeshEnable mesh_enable = 3;
}



message HiveConnectHiveMindApi {
    uint32 message_id = 1;
    oneof message {
        GetAgentsListRequest agents_req = 2;
        GetAgentsListResponse agents_resp = 3;
        HiveConnectNetworkConfigSetRequest network_config_set_request = 4;
        HiveConnectNetworkConfigSetResponse network_config_set_response = 5;
        HiveConnectNetworkConfigGetRequest network_config_get_request = 6;
        HiveConnectNetworkConfigGetResponse network_config_get_response = 7;
    }
}

// Messages used by buzz
message BuzzMessage {
    bytes payload = 1;
}

message BuzzMessages{
    repeated BuzzMessage messages = 1;
}

message VmMessage {
    oneof message {
        BuzzMessages buzz = 1;
    }
}

// Base request to wrap all other request types
message Request {
    uint32 id = 1;
    oneof message {
        UserCallRequest user_call = 2;
        HiveMindHostApiRequest hivemind_host = 3;
    }
}

message Response {
    uint32 id = 1;
    oneof message {
        GenericResponse generic = 2;
        UserCallResponse user_call = 3;
        HiveMindHostApiResponse hivemind_host = 4;
    }
}

// First message sent on connection
// Send a greeting with any data to the hivemind
//and the hivemind will send you a greet back with it's id
message Greeting{
    // Id of the board
    uint32 agent_id = 1;
}

// NetworkAPI used to share IP address and such
message IPDiscovery {
    uint32 ip = 1; // IP address as uint32
}

message NetworkAPI {
    oneof call {
        IPDiscovery ipDiscovery = 1;
    }
}

// Interloc API
enum InterlocState {
    UNSUPORTED = 0;
    STANDBY = 1;
    OPERATING = 2;
    ANGLE_CALIB_SENDER = 3;
    ANGLE_CALIB_RECEIVER = 4;
    TWR_CALIB_INITIATOR = 5;
    TWR_CALIB_RESPONDER = 6;
}

message SetInterlocState {
    InterlocState state = 1;
}

message ConfigureAngleCalibration {
    uint32 numberOfFrames = 1;
}

message ConfigureTWRCalibration {
    float distance = 1;
}

message InterlocConfiguration {
    oneof configurationMessage {
        ConfigureAngleCalibration configureAngleCalibration = 1;
        ConfigureTWRCalibration configureTWRCalibration = 2;
    }
}

message InterlocRxFrameInfo {
    uint32 beeboardPort = 1 ;
    uint64 rxTimestamp = 2;
    float sfdAngle = 3;
    float accumulatorAngle = 4;
    uint32 messageId = 5;
}

message InterlocRxFrameRawAngleData {
    uint32 frameId = 1;
    repeated InterlocRxFrameInfo frameInfos = 2;
}

message InterlocRawAngleData {
    repeated InterlocRxFrameRawAngleData frames = 1;
}

message InterlocStateChange {
    InterlocState previousState = 1;
    InterlocState newState = 2;
}

message InterlocOutputMessage {
    oneof outputMessage {
        InterlocStateChange stateChange = 1;
        InterlocRawAngleData rawAngleData = 2;
    }
}

message InterlocAPI {
    oneof message {
        SetInterlocState setState = 1;
        InterlocConfiguration configure = 2;
        InterlocOutputMessage output = 3;
    }
}

message Message {

    uint32 source_id = 1;

    uint32 destination_id = 2;

    oneof message {
        Request request = 3;
        Response response = 4;
        Greeting greeting = 5;
        VmMessage vm = 6;
        NetworkAPI network = 7;
        InterlocAPI interloc = 8;
        HiveConnectHiveMindApi hiveconnect_hivemind = 9;
    }
}
